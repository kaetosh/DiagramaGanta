# import datetime
# import pandas as pd
# import matplotlib.pyplot as plt
# from matplotlib.dates import datestr2num, DateFormatter, DayLocator
# from matplotlib.ticker import AutoMinorLocator
# from matplotlib.patches import Patch
# import random

# # рандомный цвет для разделения категорий объектов (задачи для проекта, ФИО сотрудника для графика отпусков и т.д.)
# def random_color():
#     return "#{:06x}".format(random.randint(0, 0xFFFFFF))

# # читаем исходный файл
# df = pd.read_excel('DataGant.xlsx')

# # устанавливаем формат даты для столбцов с началом и окончанием объекта
# df.start_dates = pd.to_datetime(df.start_dates)
# df.end_dates = pd.to_datetime(df.end_dates)

# # находим период в днях между датами начала и окончанием объектов
# df['durations'] = df.end_dates - df.start_dates

# # помечаем категории объектов рандомным цветом
# unique_type_object = df.type_object.unique()
# color_map = {}
# for i in unique_type_object:
#     color_map[i] = random_color()
# df['colors'] = df.type_object.map(color_map)

# fig, ax = plt.subplots(figsize=(15, 8), facecolor='#25253c')

# ax.set_facecolor('#25253c')

# # Display the bars
# ax.barh(y=df.object, width=df.durations, left=df.start_dates, height=0.8, color=df['colors'])
# ax.invert_yaxis()

# # Setup the x axis labels
# ax.set_xlim(df.start_dates.min(), df.end_dates.max())

# date_form = DateFormatter("%Y-%m-%d")
# ax.xaxis.set_major_formatter(date_form)

# ax.xaxis.set_major_locator(DayLocator(interval=10))
# ax.xaxis.set_minor_locator(AutoMinorLocator(5))
# ax.tick_params(axis='x', which='minor', length=2, color='white', labelsize=6)

# ax.get_yaxis().set_visible(False)

# # Control the colour of the grid for major and minor lines
# ax.grid(True, axis='x', linestyle='-', color='#FFFFFF', alpha=0.2, which='major') #'#FFFFFF'
# ax.grid(True, axis='x', linestyle='-', color='#FFFFFF', alpha=0.05, which='minor')
# ax.set_axisbelow(True)


# for index, row in df.iterrows():
#     ax.text(row.start_dates, row.object, f' {row.object}\n с {row.start_dates.strftime("%d.%m")}, {row.durations.days} дн.', ha='left', va='center', color='white', fontsize=12) # fontweight='bold'


# # Add the current date line
# today = datetime.datetime.now().strftime("%Y-%m-%d")
# today_num = datestr2num(today)
# ax.axvline(today_num, color='red', alpha=0.8)

# # Style ticks, labels and colours
# ax.tick_params(axis='both', colors='white')

# ax.set_xlabel(None, color='white', fontsize=12)
# ax.set_title(df.name_diagram[0], color='white', fontsize=14)

# # Hide spines so only bottom is visible
# ax.spines['left'].set_visible(False)
# ax.spines['top'].set_visible(False)
# ax.spines['right'].set_visible(False)

# # Create a list of custom patches for the legend
# legend_elements = [Patch(facecolor=j, label=i) for i, j in color_map.items()]


# # Add the legend in the top right corner of the plot
# ax.legend(handles=legend_elements, loc='upper right',
#           facecolor='white',
#           edgecolor='white',
#           fontsize=10, title=None, title_fontsize=12, frameon=True)
# plt.savefig('GantDiagram.png', dpi=200)
# plt.show()
